Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    1. No powerpoints
    2. Lots of problem solving sessions
    3. At least 50% of the participants to have completed the assignments for us to continue 

About You:
    Name
    Experience
    Primary Skillset
    Experinece in Go (if any)

Why Go?
    1. Power of C & C++ without the complexities of C & C++
        Auto Memory Management (GC)
        Support for pointers (No pointer arthmetic)
    2. No VM 
    3. Simplicity
        25 keywords
        - No access modifiers (public, private, protected)
        - No classes (Only structs)
        - No inheritance (Only composition)
        - No exceptions (Only errors)
        - No reference types (Only value types)
        - No pointer arithmetic
        - No implicit type conversion
    4. Extremely light weight
        compiles to native code
        No need for any app servers
        Performance is equivalent to C++
    5. Built for concurrency
        concurrency = the ability to have more than one execution path
        OS Threads are costly
            1 OS thread = 2 MB of memory
        1000s of goroutines can be created using the same memory needed for 1 OR 2 OS thread(s)
        A concurrent operation in golang = a goroutine
        Concurrency is built in the language
            - go, chan (data type), <- (channel operator), range, select etc
        SDK
            sync package


To run a go program
    go run <filename.go>

To create a build   
    go build <filename.go>
    go build -o <build_filename> <filename.go>

To create a build for other platforms
for ex: windows
    
    GOOS=windows GOARCH=386 go build <filename.go>
    GOOS=windows GOARCH=386 go build -o <build_filename> <filename.go>

    The list of other platform configurations can be found at :
        https://go.dev/doc/install/source#environment

    To change the default environment variables
        go env -w GOOS=linux GOARCH=amd64
        go build -o <build_filename> <filename.go>

Data types
    string
    bool

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (complex number with float32 real and imaginary parts)
    complex128 (complex number with float64 real and imaginary parts)

    byte (alias for uint8)
    rune (alias for int32) (unicode code point)


Programming constructs
    - if
    - for
    - switch
    - function


Assignment:01
    Print the first 100 prime numbers from 3

AssignmentL:01-b
    Print the prime numbers between 2 and 100
    
Assignment:02
    Display the following the menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit
    If the user choice is 1 - 4,
        Accept 2 numbers from the user
        Perform the operation  
        Display the result
        Display the menu again
    If the user choice is 5,
        Exit the program
    If the user choice is NOT 1 - 5
        Diplay "Invalid choice"
        Display the menu again

Functions
    - anonymous functions
    - higher order functions
        * can be assigned as values to variables
        * can be passed as arguments to other functions
        * can be returned as return values from other functions
    - variadic functions
    
Assignment:03
    refactor the assignment:02 solution to use functions
        NOTE : Every function should have only one reason to change (SRP)



open the file 
defer func(){
    close the file
}()

while not eof{

    read a line
    if err {
        log(err)
        
        return
    }

    parse the line
    if err {
        log(err)
        
        return
    }

    process the line
    if err {
        log(err)
        
        return
    }
}

return the result


Collections
    Array
        fixed size collection of data of the same type

    Slice
        Varying size collection of data of the same type
        
    Map